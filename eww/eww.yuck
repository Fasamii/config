;; Variables
(defvar show_bar true)

;; Polls for system data
(defpoll time_hour :interval "1s" "date +%H")
(defpoll time_minute :interval "1s" "date +%M") 
(defpoll time_second :interval "1s" "date +%S")

;; (defpoll song_title :interval "2s" "playerctl metadata title 2>/dev/null | tr '[:lower:]' '[:upper:]' | fold -w1 | head -20")
;; (defpoll song_position :interval "500ms" "playerctl position 2>/dev/null | cut -d. -f1 | xargs printf '%03d' || echo '000'")
;; (defpoll song_length :interval "2s" "playerctl metadata mpris:length 2>/dev/null | awk '{printf \"%03d\", int($1/1000000)}' || echo '000'")
(defpoll song_title :interval "1s" 
	"playerctl -p spotify,vlc,firefox,%any metadata title 2>/dev/null | tr '[:lower:]' '[:upper:]' | fold -w1 | head -28 || echo ''")
(defpoll song_position :interval "500ms" 
	"playerctl -p spotify,vlc,firefox,%any position 2>/dev/null | cut -d. -f1 | xargs printf '%03d' || echo '000'")
(defpoll song_length :interval "2s" 
	"playerctl -p spotify,vlc,firefox,%any metadata mpris:length 2>/dev/null | awk '{printf \"%03d\", int($1/1000000)}' || echo '000'")


(defpoll volume-level :interval "200ms" "pactl get-sink-volume @DEFAULT_SINK@ | awk '{print $5}' | tr -d '%'")

;; Time widget
(defwidget time []
	(box :class "time-container"
	     :orientation "v"
	     :space-evenly false
	     :spacing 2
	     :style "margin-bottom: 4px;"
	(label :text time_hour 
		 :style "color: #ffffff; font-size: 9px; text-align: center; padding: 2px 0; min-height: 12px;")
	(label :text time_minute 
		 :style "color: #ffffff; font-size: 9px; text-align: center; padding: 2px 0; min-height: 12px;")
	(label :text time_second 
		 :style "color: #ffffff; font-size: 9px; text-align: center; padding: 2px 0; min-height: 12px;")))

(defwidget volume []
	(box :class "volume-box"
	     :halign "center"
	     :valign "center"
      (progress :class "vol-bar"
		    :halign "center"
		    :valign "center"
		    :orientation "v"
		    :flipped true
		    :max 100
		    :min 0
		    :value volume-level
		    :height 120
		)
	)
)

;; Song info widget  
(defwidget song []
	(box :class "song-container"
		:orientation "v" 
		:space-evenly false
		:spacing 4
		:haligh "center"
		:valign "center"
	(label :text {song_title != "" ? song_title : "No Song"}
			:limit-width 20
			:wrap false)
	(box :class "song-timing"
		:orientation "v"
		:space-evenly false
		:spacing 2
		:style "padding-top: 8px"
		;; (label :text song_position) 
		;; (label :text song_length)
		(circular-progress 
			:style "color: #ffffff; background-color: #333333;"
			:value "${song_length > 0 ? (song_position * 100 / song_length) : 0}"
			:thickness 7)
		)
	)
)

;; Main bar widget
(defwidget bar []
  (box :class "main-bar"
       :orientation "v"
       :space-evenly false
    (time)
    (box :expand true :vexpand true)
		(volume)
    (box :expand true :vexpand true)
    (box :orientation "v"
         :visible {song_title != ""}
         (song))
	))

;; Window definition
(defwindow bar
  :monitor 0
  :geometry (geometry :x "0px"
                      :y "0px" 
                      :width "24px"
                      :height "100%"
                      :anchor "right center")
  :stacking "fg"
  :reserve (struts :distance "40px" :side "right")
  :windowtype "dock"
  :wm-ignore false
  :exclusive true
  :layer "top"
  (bar))
